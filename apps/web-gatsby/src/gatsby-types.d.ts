/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
  readonly childMdx: Maybe<Mdx>;
  /** Returns the first child node of type MenuJson or null if there are no children of given type on this node */
  readonly childMenuJson: Maybe<MenuJson>;
  /** Returns the first child node of type TalksJson or null if there are no children of given type on this node */
  readonly childTalksJson: Maybe<TalksJson>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  /** Returns all children nodes filtered by type Mdx */
  readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  /** Returns all children nodes filtered by type MenuJson */
  readonly childrenMenuJson: Maybe<ReadonlyArray<Maybe<MenuJson>>>;
  /** Returns all children nodes filtered by type TalksJson */
  readonly childrenTalksJson: Maybe<ReadonlyArray<Maybe<TalksJson>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'childMarkdownRemark.children'
  | 'childMarkdownRemark.children.children'
  | 'childMarkdownRemark.children.children.children'
  | 'childMarkdownRemark.children.children.id'
  | 'childMarkdownRemark.children.id'
  | 'childMarkdownRemark.children.internal.content'
  | 'childMarkdownRemark.children.internal.contentDigest'
  | 'childMarkdownRemark.children.internal.contentFilePath'
  | 'childMarkdownRemark.children.internal.description'
  | 'childMarkdownRemark.children.internal.fieldOwners'
  | 'childMarkdownRemark.children.internal.ignoreType'
  | 'childMarkdownRemark.children.internal.mediaType'
  | 'childMarkdownRemark.children.internal.owner'
  | 'childMarkdownRemark.children.internal.type'
  | 'childMarkdownRemark.children.parent.children'
  | 'childMarkdownRemark.children.parent.id'
  | 'childMarkdownRemark.excerpt'
  | 'childMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.fields.readingTime.minutes'
  | 'childMarkdownRemark.fields.readingTime.text'
  | 'childMarkdownRemark.fields.readingTime.time'
  | 'childMarkdownRemark.fields.readingTime.words'
  | 'childMarkdownRemark.fields.socialcard'
  | 'childMarkdownRemark.fileAbsolutePath'
  | 'childMarkdownRemark.frontmatter.canonical'
  | 'childMarkdownRemark.frontmatter.coverInfo'
  | 'childMarkdownRemark.frontmatter.cover.absolutePath'
  | 'childMarkdownRemark.frontmatter.cover.accessTime'
  | 'childMarkdownRemark.frontmatter.cover.atime'
  | 'childMarkdownRemark.frontmatter.cover.atimeMs'
  | 'childMarkdownRemark.frontmatter.cover.base'
  | 'childMarkdownRemark.frontmatter.cover.birthTime'
  | 'childMarkdownRemark.frontmatter.cover.birthtime'
  | 'childMarkdownRemark.frontmatter.cover.birthtimeMs'
  | 'childMarkdownRemark.frontmatter.cover.blksize'
  | 'childMarkdownRemark.frontmatter.cover.blocks'
  | 'childMarkdownRemark.frontmatter.cover.changeTime'
  | 'childMarkdownRemark.frontmatter.cover.children'
  | 'childMarkdownRemark.frontmatter.cover.childrenImageSharp'
  | 'childMarkdownRemark.frontmatter.cover.childrenMarkdownRemark'
  | 'childMarkdownRemark.frontmatter.cover.childrenMdx'
  | 'childMarkdownRemark.frontmatter.cover.childrenMenuJson'
  | 'childMarkdownRemark.frontmatter.cover.childrenTalksJson'
  | 'childMarkdownRemark.frontmatter.cover.ctime'
  | 'childMarkdownRemark.frontmatter.cover.ctimeMs'
  | 'childMarkdownRemark.frontmatter.cover.dev'
  | 'childMarkdownRemark.frontmatter.cover.dir'
  | 'childMarkdownRemark.frontmatter.cover.ext'
  | 'childMarkdownRemark.frontmatter.cover.extension'
  | 'childMarkdownRemark.frontmatter.cover.gid'
  | 'childMarkdownRemark.frontmatter.cover.id'
  | 'childMarkdownRemark.frontmatter.cover.ino'
  | 'childMarkdownRemark.frontmatter.cover.mode'
  | 'childMarkdownRemark.frontmatter.cover.modifiedTime'
  | 'childMarkdownRemark.frontmatter.cover.mtime'
  | 'childMarkdownRemark.frontmatter.cover.mtimeMs'
  | 'childMarkdownRemark.frontmatter.cover.name'
  | 'childMarkdownRemark.frontmatter.cover.nlink'
  | 'childMarkdownRemark.frontmatter.cover.prettySize'
  | 'childMarkdownRemark.frontmatter.cover.publicURL'
  | 'childMarkdownRemark.frontmatter.cover.rdev'
  | 'childMarkdownRemark.frontmatter.cover.relativeDirectory'
  | 'childMarkdownRemark.frontmatter.cover.relativePath'
  | 'childMarkdownRemark.frontmatter.cover.root'
  | 'childMarkdownRemark.frontmatter.cover.size'
  | 'childMarkdownRemark.frontmatter.cover.sourceInstanceName'
  | 'childMarkdownRemark.frontmatter.cover.uid'
  | 'childMarkdownRemark.frontmatter.date'
  | 'childMarkdownRemark.frontmatter.description'
  | 'childMarkdownRemark.frontmatter.published'
  | 'childMarkdownRemark.frontmatter.tags'
  | 'childMarkdownRemark.frontmatter.title'
  | 'childMarkdownRemark.headings'
  | 'childMarkdownRemark.headings.depth'
  | 'childMarkdownRemark.headings.id'
  | 'childMarkdownRemark.headings.value'
  | 'childMarkdownRemark.html'
  | 'childMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.id'
  | 'childMarkdownRemark.internal.content'
  | 'childMarkdownRemark.internal.contentDigest'
  | 'childMarkdownRemark.internal.contentFilePath'
  | 'childMarkdownRemark.internal.description'
  | 'childMarkdownRemark.internal.fieldOwners'
  | 'childMarkdownRemark.internal.ignoreType'
  | 'childMarkdownRemark.internal.mediaType'
  | 'childMarkdownRemark.internal.owner'
  | 'childMarkdownRemark.internal.type'
  | 'childMarkdownRemark.parent.children'
  | 'childMarkdownRemark.parent.children.children'
  | 'childMarkdownRemark.parent.children.id'
  | 'childMarkdownRemark.parent.id'
  | 'childMarkdownRemark.parent.internal.content'
  | 'childMarkdownRemark.parent.internal.contentDigest'
  | 'childMarkdownRemark.parent.internal.contentFilePath'
  | 'childMarkdownRemark.parent.internal.description'
  | 'childMarkdownRemark.parent.internal.fieldOwners'
  | 'childMarkdownRemark.parent.internal.ignoreType'
  | 'childMarkdownRemark.parent.internal.mediaType'
  | 'childMarkdownRemark.parent.internal.owner'
  | 'childMarkdownRemark.parent.internal.type'
  | 'childMarkdownRemark.parent.parent.children'
  | 'childMarkdownRemark.parent.parent.id'
  | 'childMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.wordCount.paragraphs'
  | 'childMarkdownRemark.wordCount.sentences'
  | 'childMarkdownRemark.wordCount.words'
  | 'childMdx.body'
  | 'childMdx.childGrvscCodeBlock.additionalThemes'
  | 'childMdx.childGrvscCodeBlock.additionalThemes.conditions'
  | 'childMdx.childGrvscCodeBlock.additionalThemes.identifier'
  | 'childMdx.childGrvscCodeBlock.additionalThemes.path'
  | 'childMdx.childGrvscCodeBlock.children'
  | 'childMdx.childGrvscCodeBlock.children.children'
  | 'childMdx.childGrvscCodeBlock.children.id'
  | 'childMdx.childGrvscCodeBlock.codeClassName'
  | 'childMdx.childGrvscCodeBlock.defaultTheme.conditions'
  | 'childMdx.childGrvscCodeBlock.defaultTheme.identifier'
  | 'childMdx.childGrvscCodeBlock.defaultTheme.path'
  | 'childMdx.childGrvscCodeBlock.html'
  | 'childMdx.childGrvscCodeBlock.id'
  | 'childMdx.childGrvscCodeBlock.index'
  | 'childMdx.childGrvscCodeBlock.internal.content'
  | 'childMdx.childGrvscCodeBlock.internal.contentDigest'
  | 'childMdx.childGrvscCodeBlock.internal.contentFilePath'
  | 'childMdx.childGrvscCodeBlock.internal.description'
  | 'childMdx.childGrvscCodeBlock.internal.fieldOwners'
  | 'childMdx.childGrvscCodeBlock.internal.ignoreType'
  | 'childMdx.childGrvscCodeBlock.internal.mediaType'
  | 'childMdx.childGrvscCodeBlock.internal.owner'
  | 'childMdx.childGrvscCodeBlock.internal.type'
  | 'childMdx.childGrvscCodeBlock.language'
  | 'childMdx.childGrvscCodeBlock.meta'
  | 'childMdx.childGrvscCodeBlock.parent.children'
  | 'childMdx.childGrvscCodeBlock.parent.id'
  | 'childMdx.childGrvscCodeBlock.preClassName'
  | 'childMdx.childGrvscCodeBlock.text'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.attrs'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.className'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.data'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.diff'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.html'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.text'
  | 'childMdx.childGrvscCodeBlock.tokenizedLines.tokens'
  | 'childMdx.children'
  | 'childMdx.childrenGrvscCodeBlock'
  | 'childMdx.childrenGrvscCodeBlock.additionalThemes'
  | 'childMdx.childrenGrvscCodeBlock.additionalThemes.conditions'
  | 'childMdx.childrenGrvscCodeBlock.additionalThemes.identifier'
  | 'childMdx.childrenGrvscCodeBlock.additionalThemes.path'
  | 'childMdx.childrenGrvscCodeBlock.children'
  | 'childMdx.childrenGrvscCodeBlock.children.children'
  | 'childMdx.childrenGrvscCodeBlock.children.id'
  | 'childMdx.childrenGrvscCodeBlock.codeClassName'
  | 'childMdx.childrenGrvscCodeBlock.defaultTheme.conditions'
  | 'childMdx.childrenGrvscCodeBlock.defaultTheme.identifier'
  | 'childMdx.childrenGrvscCodeBlock.defaultTheme.path'
  | 'childMdx.childrenGrvscCodeBlock.html'
  | 'childMdx.childrenGrvscCodeBlock.id'
  | 'childMdx.childrenGrvscCodeBlock.index'
  | 'childMdx.childrenGrvscCodeBlock.internal.content'
  | 'childMdx.childrenGrvscCodeBlock.internal.contentDigest'
  | 'childMdx.childrenGrvscCodeBlock.internal.contentFilePath'
  | 'childMdx.childrenGrvscCodeBlock.internal.description'
  | 'childMdx.childrenGrvscCodeBlock.internal.fieldOwners'
  | 'childMdx.childrenGrvscCodeBlock.internal.ignoreType'
  | 'childMdx.childrenGrvscCodeBlock.internal.mediaType'
  | 'childMdx.childrenGrvscCodeBlock.internal.owner'
  | 'childMdx.childrenGrvscCodeBlock.internal.type'
  | 'childMdx.childrenGrvscCodeBlock.language'
  | 'childMdx.childrenGrvscCodeBlock.meta'
  | 'childMdx.childrenGrvscCodeBlock.parent.children'
  | 'childMdx.childrenGrvscCodeBlock.parent.id'
  | 'childMdx.childrenGrvscCodeBlock.preClassName'
  | 'childMdx.childrenGrvscCodeBlock.text'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.attrs'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.className'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.data'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.diff'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.html'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.text'
  | 'childMdx.childrenGrvscCodeBlock.tokenizedLines.tokens'
  | 'childMdx.children.children'
  | 'childMdx.children.children.children'
  | 'childMdx.children.children.id'
  | 'childMdx.children.id'
  | 'childMdx.children.internal.content'
  | 'childMdx.children.internal.contentDigest'
  | 'childMdx.children.internal.contentFilePath'
  | 'childMdx.children.internal.description'
  | 'childMdx.children.internal.fieldOwners'
  | 'childMdx.children.internal.ignoreType'
  | 'childMdx.children.internal.mediaType'
  | 'childMdx.children.internal.owner'
  | 'childMdx.children.internal.type'
  | 'childMdx.children.parent.children'
  | 'childMdx.children.parent.id'
  | 'childMdx.excerpt'
  | 'childMdx.fields.readingTime.minutes'
  | 'childMdx.fields.readingTime.text'
  | 'childMdx.fields.readingTime.time'
  | 'childMdx.fields.readingTime.words'
  | 'childMdx.fields.slug'
  | 'childMdx.fields.socialcard'
  | 'childMdx.fileAbsolutePath'
  | 'childMdx.frontmatter.canonical'
  | 'childMdx.frontmatter.coverInfo'
  | 'childMdx.frontmatter.cover.absolutePath'
  | 'childMdx.frontmatter.cover.accessTime'
  | 'childMdx.frontmatter.cover.atime'
  | 'childMdx.frontmatter.cover.atimeMs'
  | 'childMdx.frontmatter.cover.base'
  | 'childMdx.frontmatter.cover.birthTime'
  | 'childMdx.frontmatter.cover.birthtime'
  | 'childMdx.frontmatter.cover.birthtimeMs'
  | 'childMdx.frontmatter.cover.blksize'
  | 'childMdx.frontmatter.cover.blocks'
  | 'childMdx.frontmatter.cover.changeTime'
  | 'childMdx.frontmatter.cover.children'
  | 'childMdx.frontmatter.cover.childrenImageSharp'
  | 'childMdx.frontmatter.cover.childrenMarkdownRemark'
  | 'childMdx.frontmatter.cover.childrenMdx'
  | 'childMdx.frontmatter.cover.childrenMenuJson'
  | 'childMdx.frontmatter.cover.childrenTalksJson'
  | 'childMdx.frontmatter.cover.ctime'
  | 'childMdx.frontmatter.cover.ctimeMs'
  | 'childMdx.frontmatter.cover.dev'
  | 'childMdx.frontmatter.cover.dir'
  | 'childMdx.frontmatter.cover.ext'
  | 'childMdx.frontmatter.cover.extension'
  | 'childMdx.frontmatter.cover.gid'
  | 'childMdx.frontmatter.cover.id'
  | 'childMdx.frontmatter.cover.ino'
  | 'childMdx.frontmatter.cover.mode'
  | 'childMdx.frontmatter.cover.modifiedTime'
  | 'childMdx.frontmatter.cover.mtime'
  | 'childMdx.frontmatter.cover.mtimeMs'
  | 'childMdx.frontmatter.cover.name'
  | 'childMdx.frontmatter.cover.nlink'
  | 'childMdx.frontmatter.cover.prettySize'
  | 'childMdx.frontmatter.cover.publicURL'
  | 'childMdx.frontmatter.cover.rdev'
  | 'childMdx.frontmatter.cover.relativeDirectory'
  | 'childMdx.frontmatter.cover.relativePath'
  | 'childMdx.frontmatter.cover.root'
  | 'childMdx.frontmatter.cover.size'
  | 'childMdx.frontmatter.cover.sourceInstanceName'
  | 'childMdx.frontmatter.cover.uid'
  | 'childMdx.frontmatter.date'
  | 'childMdx.frontmatter.description'
  | 'childMdx.frontmatter.published'
  | 'childMdx.frontmatter.tags'
  | 'childMdx.frontmatter.title'
  | 'childMdx.headings'
  | 'childMdx.headings.depth'
  | 'childMdx.headings.value'
  | 'childMdx.html'
  | 'childMdx.id'
  | 'childMdx.internal.content'
  | 'childMdx.internal.contentDigest'
  | 'childMdx.internal.contentFilePath'
  | 'childMdx.internal.description'
  | 'childMdx.internal.fieldOwners'
  | 'childMdx.internal.ignoreType'
  | 'childMdx.internal.mediaType'
  | 'childMdx.internal.owner'
  | 'childMdx.internal.type'
  | 'childMdx.mdxAST'
  | 'childMdx.parent.children'
  | 'childMdx.parent.children.children'
  | 'childMdx.parent.children.id'
  | 'childMdx.parent.id'
  | 'childMdx.parent.internal.content'
  | 'childMdx.parent.internal.contentDigest'
  | 'childMdx.parent.internal.contentFilePath'
  | 'childMdx.parent.internal.description'
  | 'childMdx.parent.internal.fieldOwners'
  | 'childMdx.parent.internal.ignoreType'
  | 'childMdx.parent.internal.mediaType'
  | 'childMdx.parent.internal.owner'
  | 'childMdx.parent.internal.type'
  | 'childMdx.parent.parent.children'
  | 'childMdx.parent.parent.id'
  | 'childMdx.rawBody'
  | 'childMdx.slug'
  | 'childMdx.tableOfContents'
  | 'childMdx.timeToRead'
  | 'childMdx.wordCount.paragraphs'
  | 'childMdx.wordCount.sentences'
  | 'childMdx.wordCount.words'
  | 'childMenuJson.children'
  | 'childMenuJson.children.children'
  | 'childMenuJson.children.children.children'
  | 'childMenuJson.children.children.id'
  | 'childMenuJson.children.id'
  | 'childMenuJson.children.internal.content'
  | 'childMenuJson.children.internal.contentDigest'
  | 'childMenuJson.children.internal.contentFilePath'
  | 'childMenuJson.children.internal.description'
  | 'childMenuJson.children.internal.fieldOwners'
  | 'childMenuJson.children.internal.ignoreType'
  | 'childMenuJson.children.internal.mediaType'
  | 'childMenuJson.children.internal.owner'
  | 'childMenuJson.children.internal.type'
  | 'childMenuJson.children.parent.children'
  | 'childMenuJson.children.parent.id'
  | 'childMenuJson.footerOnly'
  | 'childMenuJson.home'
  | 'childMenuJson.id'
  | 'childMenuJson.internal.content'
  | 'childMenuJson.internal.contentDigest'
  | 'childMenuJson.internal.contentFilePath'
  | 'childMenuJson.internal.description'
  | 'childMenuJson.internal.fieldOwners'
  | 'childMenuJson.internal.ignoreType'
  | 'childMenuJson.internal.mediaType'
  | 'childMenuJson.internal.owner'
  | 'childMenuJson.internal.type'
  | 'childMenuJson.label'
  | 'childMenuJson.link'
  | 'childMenuJson.parent.children'
  | 'childMenuJson.parent.children.children'
  | 'childMenuJson.parent.children.id'
  | 'childMenuJson.parent.id'
  | 'childMenuJson.parent.internal.content'
  | 'childMenuJson.parent.internal.contentDigest'
  | 'childMenuJson.parent.internal.contentFilePath'
  | 'childMenuJson.parent.internal.description'
  | 'childMenuJson.parent.internal.fieldOwners'
  | 'childMenuJson.parent.internal.ignoreType'
  | 'childMenuJson.parent.internal.mediaType'
  | 'childMenuJson.parent.internal.owner'
  | 'childMenuJson.parent.internal.type'
  | 'childMenuJson.parent.parent.children'
  | 'childMenuJson.parent.parent.id'
  | 'childTalksJson.children'
  | 'childTalksJson.children.children'
  | 'childTalksJson.children.children.children'
  | 'childTalksJson.children.children.id'
  | 'childTalksJson.children.id'
  | 'childTalksJson.children.internal.content'
  | 'childTalksJson.children.internal.contentDigest'
  | 'childTalksJson.children.internal.contentFilePath'
  | 'childTalksJson.children.internal.description'
  | 'childTalksJson.children.internal.fieldOwners'
  | 'childTalksJson.children.internal.ignoreType'
  | 'childTalksJson.children.internal.mediaType'
  | 'childTalksJson.children.internal.owner'
  | 'childTalksJson.children.internal.type'
  | 'childTalksJson.children.parent.children'
  | 'childTalksJson.children.parent.id'
  | 'childTalksJson.coSpeaker'
  | 'childTalksJson.coSpeakerHandle'
  | 'childTalksJson.date'
  | 'childTalksJson.event'
  | 'childTalksJson.id'
  | 'childTalksJson.image'
  | 'childTalksJson.internal.content'
  | 'childTalksJson.internal.contentDigest'
  | 'childTalksJson.internal.contentFilePath'
  | 'childTalksJson.internal.description'
  | 'childTalksJson.internal.fieldOwners'
  | 'childTalksJson.internal.ignoreType'
  | 'childTalksJson.internal.mediaType'
  | 'childTalksJson.internal.owner'
  | 'childTalksJson.internal.type'
  | 'childTalksJson.link'
  | 'childTalksJson.parent.children'
  | 'childTalksJson.parent.children.children'
  | 'childTalksJson.parent.children.id'
  | 'childTalksJson.parent.id'
  | 'childTalksJson.parent.internal.content'
  | 'childTalksJson.parent.internal.contentDigest'
  | 'childTalksJson.parent.internal.contentFilePath'
  | 'childTalksJson.parent.internal.description'
  | 'childTalksJson.parent.internal.fieldOwners'
  | 'childTalksJson.parent.internal.ignoreType'
  | 'childTalksJson.parent.internal.mediaType'
  | 'childTalksJson.parent.internal.owner'
  | 'childTalksJson.parent.internal.type'
  | 'childTalksJson.parent.parent.children'
  | 'childTalksJson.parent.parent.id'
  | 'childTalksJson.slides'
  | 'childTalksJson.title'
  | 'childTalksJson.type'
  | 'childTalksJson.video'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'childrenMarkdownRemark'
  | 'childrenMarkdownRemark.children'
  | 'childrenMarkdownRemark.children.children'
  | 'childrenMarkdownRemark.children.children.children'
  | 'childrenMarkdownRemark.children.children.id'
  | 'childrenMarkdownRemark.children.id'
  | 'childrenMarkdownRemark.children.internal.content'
  | 'childrenMarkdownRemark.children.internal.contentDigest'
  | 'childrenMarkdownRemark.children.internal.contentFilePath'
  | 'childrenMarkdownRemark.children.internal.description'
  | 'childrenMarkdownRemark.children.internal.fieldOwners'
  | 'childrenMarkdownRemark.children.internal.ignoreType'
  | 'childrenMarkdownRemark.children.internal.mediaType'
  | 'childrenMarkdownRemark.children.internal.owner'
  | 'childrenMarkdownRemark.children.internal.type'
  | 'childrenMarkdownRemark.children.parent.children'
  | 'childrenMarkdownRemark.children.parent.id'
  | 'childrenMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.fields.readingTime.minutes'
  | 'childrenMarkdownRemark.fields.readingTime.text'
  | 'childrenMarkdownRemark.fields.readingTime.time'
  | 'childrenMarkdownRemark.fields.readingTime.words'
  | 'childrenMarkdownRemark.fields.socialcard'
  | 'childrenMarkdownRemark.fileAbsolutePath'
  | 'childrenMarkdownRemark.frontmatter.canonical'
  | 'childrenMarkdownRemark.frontmatter.coverInfo'
  | 'childrenMarkdownRemark.frontmatter.cover.absolutePath'
  | 'childrenMarkdownRemark.frontmatter.cover.accessTime'
  | 'childrenMarkdownRemark.frontmatter.cover.atime'
  | 'childrenMarkdownRemark.frontmatter.cover.atimeMs'
  | 'childrenMarkdownRemark.frontmatter.cover.base'
  | 'childrenMarkdownRemark.frontmatter.cover.birthTime'
  | 'childrenMarkdownRemark.frontmatter.cover.birthtime'
  | 'childrenMarkdownRemark.frontmatter.cover.birthtimeMs'
  | 'childrenMarkdownRemark.frontmatter.cover.blksize'
  | 'childrenMarkdownRemark.frontmatter.cover.blocks'
  | 'childrenMarkdownRemark.frontmatter.cover.changeTime'
  | 'childrenMarkdownRemark.frontmatter.cover.children'
  | 'childrenMarkdownRemark.frontmatter.cover.childrenImageSharp'
  | 'childrenMarkdownRemark.frontmatter.cover.childrenMarkdownRemark'
  | 'childrenMarkdownRemark.frontmatter.cover.childrenMdx'
  | 'childrenMarkdownRemark.frontmatter.cover.childrenMenuJson'
  | 'childrenMarkdownRemark.frontmatter.cover.childrenTalksJson'
  | 'childrenMarkdownRemark.frontmatter.cover.ctime'
  | 'childrenMarkdownRemark.frontmatter.cover.ctimeMs'
  | 'childrenMarkdownRemark.frontmatter.cover.dev'
  | 'childrenMarkdownRemark.frontmatter.cover.dir'
  | 'childrenMarkdownRemark.frontmatter.cover.ext'
  | 'childrenMarkdownRemark.frontmatter.cover.extension'
  | 'childrenMarkdownRemark.frontmatter.cover.gid'
  | 'childrenMarkdownRemark.frontmatter.cover.id'
  | 'childrenMarkdownRemark.frontmatter.cover.ino'
  | 'childrenMarkdownRemark.frontmatter.cover.mode'
  | 'childrenMarkdownRemark.frontmatter.cover.modifiedTime'
  | 'childrenMarkdownRemark.frontmatter.cover.mtime'
  | 'childrenMarkdownRemark.frontmatter.cover.mtimeMs'
  | 'childrenMarkdownRemark.frontmatter.cover.name'
  | 'childrenMarkdownRemark.frontmatter.cover.nlink'
  | 'childrenMarkdownRemark.frontmatter.cover.prettySize'
  | 'childrenMarkdownRemark.frontmatter.cover.publicURL'
  | 'childrenMarkdownRemark.frontmatter.cover.rdev'
  | 'childrenMarkdownRemark.frontmatter.cover.relativeDirectory'
  | 'childrenMarkdownRemark.frontmatter.cover.relativePath'
  | 'childrenMarkdownRemark.frontmatter.cover.root'
  | 'childrenMarkdownRemark.frontmatter.cover.size'
  | 'childrenMarkdownRemark.frontmatter.cover.sourceInstanceName'
  | 'childrenMarkdownRemark.frontmatter.cover.uid'
  | 'childrenMarkdownRemark.frontmatter.date'
  | 'childrenMarkdownRemark.frontmatter.description'
  | 'childrenMarkdownRemark.frontmatter.published'
  | 'childrenMarkdownRemark.frontmatter.tags'
  | 'childrenMarkdownRemark.frontmatter.title'
  | 'childrenMarkdownRemark.headings'
  | 'childrenMarkdownRemark.headings.depth'
  | 'childrenMarkdownRemark.headings.id'
  | 'childrenMarkdownRemark.headings.value'
  | 'childrenMarkdownRemark.html'
  | 'childrenMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.id'
  | 'childrenMarkdownRemark.internal.content'
  | 'childrenMarkdownRemark.internal.contentDigest'
  | 'childrenMarkdownRemark.internal.contentFilePath'
  | 'childrenMarkdownRemark.internal.description'
  | 'childrenMarkdownRemark.internal.fieldOwners'
  | 'childrenMarkdownRemark.internal.ignoreType'
  | 'childrenMarkdownRemark.internal.mediaType'
  | 'childrenMarkdownRemark.internal.owner'
  | 'childrenMarkdownRemark.internal.type'
  | 'childrenMarkdownRemark.parent.children'
  | 'childrenMarkdownRemark.parent.children.children'
  | 'childrenMarkdownRemark.parent.children.id'
  | 'childrenMarkdownRemark.parent.id'
  | 'childrenMarkdownRemark.parent.internal.content'
  | 'childrenMarkdownRemark.parent.internal.contentDigest'
  | 'childrenMarkdownRemark.parent.internal.contentFilePath'
  | 'childrenMarkdownRemark.parent.internal.description'
  | 'childrenMarkdownRemark.parent.internal.fieldOwners'
  | 'childrenMarkdownRemark.parent.internal.ignoreType'
  | 'childrenMarkdownRemark.parent.internal.mediaType'
  | 'childrenMarkdownRemark.parent.internal.owner'
  | 'childrenMarkdownRemark.parent.internal.type'
  | 'childrenMarkdownRemark.parent.parent.children'
  | 'childrenMarkdownRemark.parent.parent.id'
  | 'childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.wordCount.paragraphs'
  | 'childrenMarkdownRemark.wordCount.sentences'
  | 'childrenMarkdownRemark.wordCount.words'
  | 'childrenMdx'
  | 'childrenMdx.body'
  | 'childrenMdx.childGrvscCodeBlock.additionalThemes'
  | 'childrenMdx.childGrvscCodeBlock.additionalThemes.conditions'
  | 'childrenMdx.childGrvscCodeBlock.additionalThemes.identifier'
  | 'childrenMdx.childGrvscCodeBlock.additionalThemes.path'
  | 'childrenMdx.childGrvscCodeBlock.children'
  | 'childrenMdx.childGrvscCodeBlock.children.children'
  | 'childrenMdx.childGrvscCodeBlock.children.id'
  | 'childrenMdx.childGrvscCodeBlock.codeClassName'
  | 'childrenMdx.childGrvscCodeBlock.defaultTheme.conditions'
  | 'childrenMdx.childGrvscCodeBlock.defaultTheme.identifier'
  | 'childrenMdx.childGrvscCodeBlock.defaultTheme.path'
  | 'childrenMdx.childGrvscCodeBlock.html'
  | 'childrenMdx.childGrvscCodeBlock.id'
  | 'childrenMdx.childGrvscCodeBlock.index'
  | 'childrenMdx.childGrvscCodeBlock.internal.content'
  | 'childrenMdx.childGrvscCodeBlock.internal.contentDigest'
  | 'childrenMdx.childGrvscCodeBlock.internal.contentFilePath'
  | 'childrenMdx.childGrvscCodeBlock.internal.description'
  | 'childrenMdx.childGrvscCodeBlock.internal.fieldOwners'
  | 'childrenMdx.childGrvscCodeBlock.internal.ignoreType'
  | 'childrenMdx.childGrvscCodeBlock.internal.mediaType'
  | 'childrenMdx.childGrvscCodeBlock.internal.owner'
  | 'childrenMdx.childGrvscCodeBlock.internal.type'
  | 'childrenMdx.childGrvscCodeBlock.language'
  | 'childrenMdx.childGrvscCodeBlock.meta'
  | 'childrenMdx.childGrvscCodeBlock.parent.children'
  | 'childrenMdx.childGrvscCodeBlock.parent.id'
  | 'childrenMdx.childGrvscCodeBlock.preClassName'
  | 'childrenMdx.childGrvscCodeBlock.text'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.attrs'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.className'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.data'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.diff'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.html'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.text'
  | 'childrenMdx.childGrvscCodeBlock.tokenizedLines.tokens'
  | 'childrenMdx.children'
  | 'childrenMdx.childrenGrvscCodeBlock'
  | 'childrenMdx.childrenGrvscCodeBlock.additionalThemes'
  | 'childrenMdx.childrenGrvscCodeBlock.additionalThemes.conditions'
  | 'childrenMdx.childrenGrvscCodeBlock.additionalThemes.identifier'
  | 'childrenMdx.childrenGrvscCodeBlock.additionalThemes.path'
  | 'childrenMdx.childrenGrvscCodeBlock.children'
  | 'childrenMdx.childrenGrvscCodeBlock.children.children'
  | 'childrenMdx.childrenGrvscCodeBlock.children.id'
  | 'childrenMdx.childrenGrvscCodeBlock.codeClassName'
  | 'childrenMdx.childrenGrvscCodeBlock.defaultTheme.conditions'
  | 'childrenMdx.childrenGrvscCodeBlock.defaultTheme.identifier'
  | 'childrenMdx.childrenGrvscCodeBlock.defaultTheme.path'
  | 'childrenMdx.childrenGrvscCodeBlock.html'
  | 'childrenMdx.childrenGrvscCodeBlock.id'
  | 'childrenMdx.childrenGrvscCodeBlock.index'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.content'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.contentDigest'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.contentFilePath'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.description'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.fieldOwners'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.ignoreType'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.mediaType'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.owner'
  | 'childrenMdx.childrenGrvscCodeBlock.internal.type'
  | 'childrenMdx.childrenGrvscCodeBlock.language'
  | 'childrenMdx.childrenGrvscCodeBlock.meta'
  | 'childrenMdx.childrenGrvscCodeBlock.parent.children'
  | 'childrenMdx.childrenGrvscCodeBlock.parent.id'
  | 'childrenMdx.childrenGrvscCodeBlock.preClassName'
  | 'childrenMdx.childrenGrvscCodeBlock.text'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.attrs'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.className'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.data'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.diff'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.html'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.text'
  | 'childrenMdx.childrenGrvscCodeBlock.tokenizedLines.tokens'
  | 'childrenMdx.children.children'
  | 'childrenMdx.children.children.children'
  | 'childrenMdx.children.children.id'
  | 'childrenMdx.children.id'
  | 'childrenMdx.children.internal.content'
  | 'childrenMdx.children.internal.contentDigest'
  | 'childrenMdx.children.internal.contentFilePath'
  | 'childrenMdx.children.internal.description'
  | 'childrenMdx.children.internal.fieldOwners'
  | 'childrenMdx.children.internal.ignoreType'
  | 'childrenMdx.children.internal.mediaType'
  | 'childrenMdx.children.internal.owner'
  | 'childrenMdx.children.internal.type'
  | 'childrenMdx.children.parent.children'
  | 'childrenMdx.children.parent.id'
  | 'childrenMdx.excerpt'
  | 'childrenMdx.fields.readingTime.minutes'
  | 'childrenMdx.fields.readingTime.text'
  | 'childrenMdx.fields.readingTime.time'
  | 'childrenMdx.fields.readingTime.words'
  | 'childrenMdx.fields.slug'
  | 'childrenMdx.fields.socialcard'
  | 'childrenMdx.fileAbsolutePath'
  | 'childrenMdx.frontmatter.canonical'
  | 'childrenMdx.frontmatter.coverInfo'
  | 'childrenMdx.frontmatter.cover.absolutePath'
  | 'childrenMdx.frontmatter.cover.accessTime'
  | 'childrenMdx.frontmatter.cover.atime'
  | 'childrenMdx.frontmatter.cover.atimeMs'
  | 'childrenMdx.frontmatter.cover.base'
  | 'childrenMdx.frontmatter.cover.birthTime'
  | 'childrenMdx.frontmatter.cover.birthtime'
  | 'childrenMdx.frontmatter.cover.birthtimeMs'
  | 'childrenMdx.frontmatter.cover.blksize'
  | 'childrenMdx.frontmatter.cover.blocks'
  | 'childrenMdx.frontmatter.cover.changeTime'
  | 'childrenMdx.frontmatter.cover.children'
  | 'childrenMdx.frontmatter.cover.childrenImageSharp'
  | 'childrenMdx.frontmatter.cover.childrenMarkdownRemark'
  | 'childrenMdx.frontmatter.cover.childrenMdx'
  | 'childrenMdx.frontmatter.cover.childrenMenuJson'
  | 'childrenMdx.frontmatter.cover.childrenTalksJson'
  | 'childrenMdx.frontmatter.cover.ctime'
  | 'childrenMdx.frontmatter.cover.ctimeMs'
  | 'childrenMdx.frontmatter.cover.dev'
  | 'childrenMdx.frontmatter.cover.dir'
  | 'childrenMdx.frontmatter.cover.ext'
  | 'childrenMdx.frontmatter.cover.extension'
  | 'childrenMdx.frontmatter.cover.gid'
  | 'childrenMdx.frontmatter.cover.id'
  | 'childrenMdx.frontmatter.cover.ino'
  | 'childrenMdx.frontmatter.cover.mode'
  | 'childrenMdx.frontmatter.cover.modifiedTime'
  | 'childrenMdx.frontmatter.cover.mtime'
  | 'childrenMdx.frontmatter.cover.mtimeMs'
  | 'childrenMdx.frontmatter.cover.name'
  | 'childrenMdx.frontmatter.cover.nlink'
  | 'childrenMdx.frontmatter.cover.prettySize'
  | 'childrenMdx.frontmatter.cover.publicURL'
  | 'childrenMdx.frontmatter.cover.rdev'
  | 'childrenMdx.frontmatter.cover.relativeDirectory'
  | 'childrenMdx.frontmatter.cover.relativePath'
  | 'childrenMdx.frontmatter.cover.root'
  | 'childrenMdx.frontmatter.cover.size'
  | 'childrenMdx.frontmatter.cover.sourceInstanceName'
  | 'childrenMdx.frontmatter.cover.uid'
  | 'childrenMdx.frontmatter.date'
  | 'childrenMdx.frontmatter.description'
  | 'childrenMdx.frontmatter.published'
  | 'childrenMdx.frontmatter.tags'
  | 'childrenMdx.frontmatter.title'
  | 'childrenMdx.headings'
  | 'childrenMdx.headings.depth'
  | 'childrenMdx.headings.value'
  | 'childrenMdx.html'
  | 'childrenMdx.id'
  | 'childrenMdx.internal.content'
  | 'childrenMdx.internal.contentDigest'
  | 'childrenMdx.internal.contentFilePath'
  | 'childrenMdx.internal.description'
  | 'childrenMdx.internal.fieldOwners'
  | 'childrenMdx.internal.ignoreType'
  | 'childrenMdx.internal.mediaType'
  | 'childrenMdx.internal.owner'
  | 'childrenMdx.internal.type'
  | 'childrenMdx.mdxAST'
  | 'childrenMdx.parent.children'
  | 'childrenMdx.parent.children.children'
  | 'childrenMdx.parent.children.id'
  | 'childrenMdx.parent.id'
  | 'childrenMdx.parent.internal.content'
  | 'childrenMdx.parent.internal.contentDigest'
  | 'childrenMdx.parent.internal.contentFilePath'
  | 'childrenMdx.parent.internal.description'
  | 'childrenMdx.parent.internal.fieldOwners'
  | 'childrenMdx.parent.internal.ignoreType'
  | 'childrenMdx.parent.internal.mediaType'
  | 'childrenMdx.parent.internal.owner'
  | 'childrenMdx.parent.internal.type'
  | 'childrenMdx.parent.parent.children'
  | 'childrenMdx.parent.parent.id'
  | 'childrenMdx.rawBody'
  | 'childrenMdx.slug'
  | 'childrenMdx.tableOfContents'
  | 'childrenMdx.timeToRead'
  | 'childrenMdx.wordCount.paragraphs'
  | 'childrenMdx.wordCount.sentences'
  | 'childrenMdx.wordCount.words'
  | 'childrenMenuJson'
  | 'childrenMenuJson.children'
  | 'childrenMenuJson.children.children'
  | 'childrenMenuJson.children.children.children'
  | 'childrenMenuJson.children.children.id'
  | 'childrenMenuJson.children.id'
  | 'childrenMenuJson.children.internal.content'
  | 'childrenMenuJson.children.internal.contentDigest'
  | 'childrenMenuJson.children.internal.contentFilePath'
  | 'childrenMenuJson.children.internal.description'
  | 'childrenMenuJson.children.internal.fieldOwners'
  | 'childrenMenuJson.children.internal.ignoreType'
  | 'childrenMenuJson.children.internal.mediaType'
  | 'childrenMenuJson.children.internal.owner'
  | 'childrenMenuJson.children.internal.type'
  | 'childrenMenuJson.children.parent.children'
  | 'childrenMenuJson.children.parent.id'
  | 'childrenMenuJson.footerOnly'
  | 'childrenMenuJson.home'
  | 'childrenMenuJson.id'
  | 'childrenMenuJson.internal.content'
  | 'childrenMenuJson.internal.contentDigest'
  | 'childrenMenuJson.internal.contentFilePath'
  | 'childrenMenuJson.internal.description'
  | 'childrenMenuJson.internal.fieldOwners'
  | 'childrenMenuJson.internal.ignoreType'
  | 'childrenMenuJson.internal.mediaType'
  | 'childrenMenuJson.internal.owner'
  | 'childrenMenuJson.internal.type'
  | 'childrenMenuJson.label'
  | 'childrenMenuJson.link'
  | 'childrenMenuJson.parent.children'
  | 'childrenMenuJson.parent.children.children'
  | 'childrenMenuJson.parent.children.id'
  | 'childrenMenuJson.parent.id'
  | 'childrenMenuJson.parent.internal.content'
  | 'childrenMenuJson.parent.internal.contentDigest'
  | 'childrenMenuJson.parent.internal.contentFilePath'
  | 'childrenMenuJson.parent.internal.description'
  | 'childrenMenuJson.parent.internal.fieldOwners'
  | 'childrenMenuJson.parent.internal.ignoreType'
  | 'childrenMenuJson.parent.internal.mediaType'
  | 'childrenMenuJson.parent.internal.owner'
  | 'childrenMenuJson.parent.internal.type'
  | 'childrenMenuJson.parent.parent.children'
  | 'childrenMenuJson.parent.parent.id'
  | 'childrenTalksJson'
  | 'childrenTalksJson.children'
  | 'childrenTalksJson.children.children'
  | 'childrenTalksJson.children.children.children'
  | 'childrenTalksJson.children.children.id'
  | 'childrenTalksJson.children.id'
  | 'childrenTalksJson.children.internal.content'
  | 'childrenTalksJson.children.internal.contentDigest'
  | 'childrenTalksJson.children.internal.contentFilePath'
  | 'childrenTalksJson.children.internal.description'
  | 'childrenTalksJson.children.internal.fieldOwners'
  | 'childrenTalksJson.children.internal.ignoreType'
  | 'childrenTalksJson.children.internal.mediaType'
  | 'childrenTalksJson.children.internal.owner'
  | 'childrenTalksJson.children.internal.type'
  | 'childrenTalksJson.children.parent.children'
  | 'childrenTalksJson.children.parent.id'
  | 'childrenTalksJson.coSpeaker'
  | 'childrenTalksJson.coSpeakerHandle'
  | 'childrenTalksJson.date'
  | 'childrenTalksJson.event'
  | 'childrenTalksJson.id'
  | 'childrenTalksJson.image'
  | 'childrenTalksJson.internal.content'
  | 'childrenTalksJson.internal.contentDigest'
  | 'childrenTalksJson.internal.contentFilePath'
  | 'childrenTalksJson.internal.description'
  | 'childrenTalksJson.internal.fieldOwners'
  | 'childrenTalksJson.internal.ignoreType'
  | 'childrenTalksJson.internal.mediaType'
  | 'childrenTalksJson.internal.owner'
  | 'childrenTalksJson.internal.type'
  | 'childrenTalksJson.link'
  | 'childrenTalksJson.parent.children'
  | 'childrenTalksJson.parent.children.children'
  | 'childrenTalksJson.parent.children.id'
  | 'childrenTalksJson.parent.id'
  | 'childrenTalksJson.parent.internal.content'
  | 'childrenTalksJson.parent.internal.contentDigest'
  | 'childrenTalksJson.parent.internal.contentFilePath'
  | 'childrenTalksJson.parent.internal.description'
  | 'childrenTalksJson.parent.internal.fieldOwners'
  | 'childrenTalksJson.parent.internal.ignoreType'
  | 'childrenTalksJson.parent.internal.mediaType'
  | 'childrenTalksJson.parent.internal.owner'
  | 'childrenTalksJson.parent.internal.type'
  | 'childrenTalksJson.parent.parent.children'
  | 'childrenTalksJson.parent.parent.id'
  | 'childrenTalksJson.slides'
  | 'childrenTalksJson.title'
  | 'childrenTalksJson.type'
  | 'childrenTalksJson.video'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly childMdx: InputMaybe<MdxFilterInput>;
  readonly childMenuJson: InputMaybe<MenuJsonFilterInput>;
  readonly childTalksJson: InputMaybe<TalksJsonFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly childrenMdx: InputMaybe<MdxFilterListInput>;
  readonly childrenMenuJson: InputMaybe<MenuJsonFilterListInput>;
  readonly childrenTalksJson: InputMaybe<TalksJsonFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GRVSCCodeBlock = Node & {
  readonly additionalThemes: ReadonlyArray<GRVSCTheme>;
  readonly children: ReadonlyArray<Node>;
  readonly codeClassName: Scalars['String'];
  readonly defaultTheme: GRVSCTheme;
  readonly html: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly index: Scalars['Int'];
  readonly internal: Internal;
  readonly language: Maybe<Scalars['String']>;
  readonly meta: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly preClassName: Scalars['String'];
  readonly text: Scalars['String'];
  readonly tokenizedLines: Maybe<ReadonlyArray<GRVSCTokenizedLine>>;
};

type GRVSCCodeBlockConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCCodeBlockEdge>;
  readonly group: ReadonlyArray<GRVSCCodeBlockGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCCodeBlock>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCCodeBlockConnection_distinctArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockConnection_groupArgs = {
  field: GRVSCCodeBlockFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCCodeBlockConnection_maxArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockConnection_minArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockConnection_sumArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};

type GRVSCCodeBlockEdge = {
  readonly next: Maybe<GRVSCCodeBlock>;
  readonly node: GRVSCCodeBlock;
  readonly previous: Maybe<GRVSCCodeBlock>;
};

type GRVSCCodeBlockFieldsEnum =
  | 'additionalThemes'
  | 'additionalThemes.conditions'
  | 'additionalThemes.conditions.condition'
  | 'additionalThemes.conditions.value'
  | 'additionalThemes.identifier'
  | 'additionalThemes.path'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'codeClassName'
  | 'defaultTheme.conditions'
  | 'defaultTheme.conditions.condition'
  | 'defaultTheme.conditions.value'
  | 'defaultTheme.identifier'
  | 'defaultTheme.path'
  | 'html'
  | 'id'
  | 'index'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'language'
  | 'meta'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'preClassName'
  | 'text'
  | 'tokenizedLines'
  | 'tokenizedLines.attrs'
  | 'tokenizedLines.className'
  | 'tokenizedLines.data'
  | 'tokenizedLines.diff'
  | 'tokenizedLines.gutterCells'
  | 'tokenizedLines.gutterCells.className'
  | 'tokenizedLines.gutterCells.text'
  | 'tokenizedLines.html'
  | 'tokenizedLines.isHighlighted'
  | 'tokenizedLines.lineNumber'
  | 'tokenizedLines.text'
  | 'tokenizedLines.tokens'
  | 'tokenizedLines.tokens.additionalThemeTokenData'
  | 'tokenizedLines.tokens.additionalThemeTokenData.bold'
  | 'tokenizedLines.tokens.additionalThemeTokenData.className'
  | 'tokenizedLines.tokens.additionalThemeTokenData.color'
  | 'tokenizedLines.tokens.additionalThemeTokenData.italic'
  | 'tokenizedLines.tokens.additionalThemeTokenData.meta'
  | 'tokenizedLines.tokens.additionalThemeTokenData.themeIdentifier'
  | 'tokenizedLines.tokens.additionalThemeTokenData.underline'
  | 'tokenizedLines.tokens.className'
  | 'tokenizedLines.tokens.defaultThemeTokenData.bold'
  | 'tokenizedLines.tokens.defaultThemeTokenData.className'
  | 'tokenizedLines.tokens.defaultThemeTokenData.color'
  | 'tokenizedLines.tokens.defaultThemeTokenData.italic'
  | 'tokenizedLines.tokens.defaultThemeTokenData.meta'
  | 'tokenizedLines.tokens.defaultThemeTokenData.themeIdentifier'
  | 'tokenizedLines.tokens.defaultThemeTokenData.underline'
  | 'tokenizedLines.tokens.endIndex'
  | 'tokenizedLines.tokens.html'
  | 'tokenizedLines.tokens.scopes'
  | 'tokenizedLines.tokens.startIndex'
  | 'tokenizedLines.tokens.text';

type GRVSCCodeBlockFilterInput = {
  readonly additionalThemes: InputMaybe<GRVSCThemeFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeClassName: InputMaybe<StringQueryOperatorInput>;
  readonly defaultTheme: InputMaybe<GRVSCThemeFilterInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly index: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly meta: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preClassName: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly tokenizedLines: InputMaybe<GRVSCTokenizedLineFilterListInput>;
};

type GRVSCCodeBlockFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCCodeBlockFilterInput>;
};

type GRVSCCodeBlockGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCCodeBlockEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GRVSCCodeBlockGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCCodeBlock>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCCodeBlockGroupConnection_distinctArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockGroupConnection_groupArgs = {
  field: GRVSCCodeBlockFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCCodeBlockGroupConnection_maxArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockGroupConnection_minArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};


type GRVSCCodeBlockGroupConnection_sumArgs = {
  field: GRVSCCodeBlockFieldsEnum;
};

type GRVSCCodeBlockSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<GRVSCCodeBlockFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type GRVSCCodeSpan = Node & {
  readonly additionalThemes: ReadonlyArray<GRVSCTheme>;
  readonly children: ReadonlyArray<Node>;
  readonly className: Maybe<Scalars['String']>;
  readonly defaultTheme: GRVSCTheme;
  readonly html: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly index: Scalars['Int'];
  readonly internal: Internal;
  readonly language: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly text: Scalars['String'];
  readonly tokens: ReadonlyArray<GRVSCToken>;
};

type GRVSCCodeSpanConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCCodeSpanEdge>;
  readonly group: ReadonlyArray<GRVSCCodeSpanGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCCodeSpan>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCCodeSpanConnection_distinctArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanConnection_groupArgs = {
  field: GRVSCCodeSpanFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCCodeSpanConnection_maxArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanConnection_minArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanConnection_sumArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};

type GRVSCCodeSpanEdge = {
  readonly next: Maybe<GRVSCCodeSpan>;
  readonly node: GRVSCCodeSpan;
  readonly previous: Maybe<GRVSCCodeSpan>;
};

type GRVSCCodeSpanFieldsEnum =
  | 'additionalThemes'
  | 'additionalThemes.conditions'
  | 'additionalThemes.conditions.condition'
  | 'additionalThemes.conditions.value'
  | 'additionalThemes.identifier'
  | 'additionalThemes.path'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'className'
  | 'defaultTheme.conditions'
  | 'defaultTheme.conditions.condition'
  | 'defaultTheme.conditions.value'
  | 'defaultTheme.identifier'
  | 'defaultTheme.path'
  | 'html'
  | 'id'
  | 'index'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'language'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'text'
  | 'tokens'
  | 'tokens.additionalThemeTokenData'
  | 'tokens.additionalThemeTokenData.bold'
  | 'tokens.additionalThemeTokenData.className'
  | 'tokens.additionalThemeTokenData.color'
  | 'tokens.additionalThemeTokenData.italic'
  | 'tokens.additionalThemeTokenData.meta'
  | 'tokens.additionalThemeTokenData.themeIdentifier'
  | 'tokens.additionalThemeTokenData.underline'
  | 'tokens.className'
  | 'tokens.defaultThemeTokenData.bold'
  | 'tokens.defaultThemeTokenData.className'
  | 'tokens.defaultThemeTokenData.color'
  | 'tokens.defaultThemeTokenData.italic'
  | 'tokens.defaultThemeTokenData.meta'
  | 'tokens.defaultThemeTokenData.themeIdentifier'
  | 'tokens.defaultThemeTokenData.underline'
  | 'tokens.endIndex'
  | 'tokens.html'
  | 'tokens.scopes'
  | 'tokens.startIndex'
  | 'tokens.text';

type GRVSCCodeSpanFilterInput = {
  readonly additionalThemes: InputMaybe<GRVSCThemeFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly defaultTheme: InputMaybe<GRVSCThemeFilterInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly index: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly tokens: InputMaybe<GRVSCTokenFilterListInput>;
};

type GRVSCCodeSpanGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCCodeSpanEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GRVSCCodeSpanGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCCodeSpan>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCCodeSpanGroupConnection_distinctArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanGroupConnection_groupArgs = {
  field: GRVSCCodeSpanFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCCodeSpanGroupConnection_maxArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanGroupConnection_minArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};


type GRVSCCodeSpanGroupConnection_sumArgs = {
  field: GRVSCCodeSpanFieldsEnum;
};

type GRVSCCodeSpanSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<GRVSCCodeSpanFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type GRVSCDiff =
  | 'ADD'
  | 'DEL';

type GRVSCDiffQueryOperatorInput = {
  readonly eq: InputMaybe<GRVSCDiff>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<GRVSCDiff>>>;
  readonly ne: InputMaybe<GRVSCDiff>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<GRVSCDiff>>>;
};

type GRVSCGutterCell = {
  readonly className: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type GRVSCGutterCellFilterInput = {
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GRVSCGutterCellFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCGutterCellFilterInput>;
};

type GRVSCStylesheet = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly css: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type GRVSCStylesheetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCStylesheetEdge>;
  readonly group: ReadonlyArray<GRVSCStylesheetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCStylesheet>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCStylesheetConnection_distinctArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetConnection_groupArgs = {
  field: GRVSCStylesheetFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCStylesheetConnection_maxArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetConnection_minArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetConnection_sumArgs = {
  field: GRVSCStylesheetFieldsEnum;
};

type GRVSCStylesheetEdge = {
  readonly next: Maybe<GRVSCStylesheet>;
  readonly node: GRVSCStylesheet;
  readonly previous: Maybe<GRVSCStylesheet>;
};

type GRVSCStylesheetFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'css'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type GRVSCStylesheetFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly css: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type GRVSCStylesheetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GRVSCStylesheetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GRVSCStylesheetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GRVSCStylesheet>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GRVSCStylesheetGroupConnection_distinctArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetGroupConnection_groupArgs = {
  field: GRVSCStylesheetFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GRVSCStylesheetGroupConnection_maxArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetGroupConnection_minArgs = {
  field: GRVSCStylesheetFieldsEnum;
};


type GRVSCStylesheetGroupConnection_sumArgs = {
  field: GRVSCStylesheetFieldsEnum;
};

type GRVSCStylesheetSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<GRVSCStylesheetFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type GRVSCTheme = {
  readonly conditions: ReadonlyArray<GRVSCThemeCondition>;
  readonly identifier: Scalars['String'];
  readonly path: Scalars['String'];
};

type GRVSCThemeArgument = {
  readonly conditions: ReadonlyArray<Scalars['String']>;
  readonly identifier: Scalars['String'];
};

type GRVSCThemeCondition = {
  readonly condition: GRVSCThemeConditionKind;
  readonly value: Maybe<Scalars['String']>;
};

type GRVSCThemeConditionFilterInput = {
  readonly condition: InputMaybe<GRVSCThemeConditionKindQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type GRVSCThemeConditionFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCThemeConditionFilterInput>;
};

type GRVSCThemeConditionKind =
  | 'default'
  | 'matchMedia'
  | 'parentSelector';

type GRVSCThemeConditionKindQueryOperatorInput = {
  readonly eq: InputMaybe<GRVSCThemeConditionKind>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<GRVSCThemeConditionKind>>>;
  readonly ne: InputMaybe<GRVSCThemeConditionKind>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<GRVSCThemeConditionKind>>>;
};

type GRVSCThemeFilterInput = {
  readonly conditions: InputMaybe<GRVSCThemeConditionFilterListInput>;
  readonly identifier: InputMaybe<StringQueryOperatorInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
};

type GRVSCThemeFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCThemeFilterInput>;
};

type GRVSCThemeTokenData = {
  readonly bold: Scalars['Boolean'];
  readonly className: Scalars['String'];
  readonly color: Scalars['String'];
  readonly italic: Scalars['Boolean'];
  readonly meta: Scalars['Int'];
  readonly themeIdentifier: Scalars['String'];
  readonly underline: Scalars['Boolean'];
};

type GRVSCThemeTokenDataFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<IntQueryOperatorInput>;
  readonly themeIdentifier: InputMaybe<StringQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type GRVSCThemeTokenDataFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCThemeTokenDataFilterInput>;
};

type GRVSCToken = {
  readonly additionalThemeTokenData: ReadonlyArray<GRVSCThemeTokenData>;
  readonly className: Scalars['String'];
  readonly defaultThemeTokenData: GRVSCThemeTokenData;
  readonly endIndex: Scalars['Int'];
  readonly html: Scalars['String'];
  readonly scopes: ReadonlyArray<Scalars['String']>;
  readonly startIndex: Scalars['Int'];
  readonly text: Scalars['String'];
};

type GRVSCTokenFilterInput = {
  readonly additionalThemeTokenData: InputMaybe<GRVSCThemeTokenDataFilterListInput>;
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly defaultThemeTokenData: InputMaybe<GRVSCThemeTokenDataFilterInput>;
  readonly endIndex: InputMaybe<IntQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly scopes: InputMaybe<StringQueryOperatorInput>;
  readonly startIndex: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GRVSCTokenFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCTokenFilterInput>;
};

type GRVSCTokenizedLine = {
  readonly attrs: Scalars['JSON'];
  readonly className: Scalars['String'];
  readonly data: Scalars['JSON'];
  readonly diff: Maybe<GRVSCDiff>;
  readonly gutterCells: Maybe<ReadonlyArray<Maybe<GRVSCGutterCell>>>;
  readonly html: Scalars['String'];
  readonly isHighlighted: Maybe<Scalars['Boolean']>;
  readonly lineNumber: Maybe<Scalars['Int']>;
  readonly text: Scalars['String'];
  readonly tokens: ReadonlyArray<GRVSCToken>;
};

type GRVSCTokenizedLineFilterInput = {
  readonly attrs: InputMaybe<JSONQueryOperatorInput>;
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly data: InputMaybe<JSONQueryOperatorInput>;
  readonly diff: InputMaybe<GRVSCDiffQueryOperatorInput>;
  readonly gutterCells: InputMaybe<GRVSCGutterCellFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly isHighlighted: InputMaybe<BooleanQueryOperatorInput>;
  readonly lineNumber: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly tokens: InputMaybe<GRVSCTokenFilterListInput>;
};

type GRVSCTokenizedLineFilterListInput = {
  readonly elemMatch: InputMaybe<GRVSCTokenizedLineFilterInput>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type HeadingsMdx =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fields: Maybe<MarkdownRemarkFields>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly grvscCodeBlocks: Maybe<ReadonlyArray<Maybe<GRVSCCodeBlock>>>;
  readonly grvscCodeSpans: Maybe<ReadonlyArray<Maybe<GRVSCCodeSpan>>>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFields = {
  readonly readingTime: Maybe<MarkdownRemarkFieldsReadingTime>;
  readonly socialcard: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'excerptAst'
  | 'fields.readingTime.minutes'
  | 'fields.readingTime.text'
  | 'fields.readingTime.time'
  | 'fields.readingTime.words'
  | 'fields.socialcard'
  | 'fileAbsolutePath'
  | 'frontmatter.canonical'
  | 'frontmatter.coverInfo'
  | 'frontmatter.cover.absolutePath'
  | 'frontmatter.cover.accessTime'
  | 'frontmatter.cover.atime'
  | 'frontmatter.cover.atimeMs'
  | 'frontmatter.cover.base'
  | 'frontmatter.cover.birthTime'
  | 'frontmatter.cover.birthtime'
  | 'frontmatter.cover.birthtimeMs'
  | 'frontmatter.cover.blksize'
  | 'frontmatter.cover.blocks'
  | 'frontmatter.cover.changeTime'
  | 'frontmatter.cover.childImageSharp.children'
  | 'frontmatter.cover.childImageSharp.gatsbyImageData'
  | 'frontmatter.cover.childImageSharp.id'
  | 'frontmatter.cover.childMarkdownRemark.children'
  | 'frontmatter.cover.childMarkdownRemark.excerpt'
  | 'frontmatter.cover.childMarkdownRemark.excerptAst'
  | 'frontmatter.cover.childMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.cover.childMarkdownRemark.headings'
  | 'frontmatter.cover.childMarkdownRemark.html'
  | 'frontmatter.cover.childMarkdownRemark.htmlAst'
  | 'frontmatter.cover.childMarkdownRemark.id'
  | 'frontmatter.cover.childMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.cover.childMarkdownRemark.tableOfContents'
  | 'frontmatter.cover.childMarkdownRemark.timeToRead'
  | 'frontmatter.cover.childMdx.body'
  | 'frontmatter.cover.childMdx.children'
  | 'frontmatter.cover.childMdx.childrenGrvscCodeBlock'
  | 'frontmatter.cover.childMdx.excerpt'
  | 'frontmatter.cover.childMdx.fileAbsolutePath'
  | 'frontmatter.cover.childMdx.headings'
  | 'frontmatter.cover.childMdx.html'
  | 'frontmatter.cover.childMdx.id'
  | 'frontmatter.cover.childMdx.mdxAST'
  | 'frontmatter.cover.childMdx.rawBody'
  | 'frontmatter.cover.childMdx.slug'
  | 'frontmatter.cover.childMdx.tableOfContents'
  | 'frontmatter.cover.childMdx.timeToRead'
  | 'frontmatter.cover.childMenuJson.children'
  | 'frontmatter.cover.childMenuJson.footerOnly'
  | 'frontmatter.cover.childMenuJson.home'
  | 'frontmatter.cover.childMenuJson.id'
  | 'frontmatter.cover.childMenuJson.label'
  | 'frontmatter.cover.childMenuJson.link'
  | 'frontmatter.cover.childTalksJson.children'
  | 'frontmatter.cover.childTalksJson.coSpeaker'
  | 'frontmatter.cover.childTalksJson.coSpeakerHandle'
  | 'frontmatter.cover.childTalksJson.date'
  | 'frontmatter.cover.childTalksJson.event'
  | 'frontmatter.cover.childTalksJson.id'
  | 'frontmatter.cover.childTalksJson.image'
  | 'frontmatter.cover.childTalksJson.link'
  | 'frontmatter.cover.childTalksJson.slides'
  | 'frontmatter.cover.childTalksJson.title'
  | 'frontmatter.cover.childTalksJson.type'
  | 'frontmatter.cover.childTalksJson.video'
  | 'frontmatter.cover.children'
  | 'frontmatter.cover.childrenImageSharp'
  | 'frontmatter.cover.childrenImageSharp.children'
  | 'frontmatter.cover.childrenImageSharp.gatsbyImageData'
  | 'frontmatter.cover.childrenImageSharp.id'
  | 'frontmatter.cover.childrenMarkdownRemark'
  | 'frontmatter.cover.childrenMarkdownRemark.children'
  | 'frontmatter.cover.childrenMarkdownRemark.excerpt'
  | 'frontmatter.cover.childrenMarkdownRemark.excerptAst'
  | 'frontmatter.cover.childrenMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.cover.childrenMarkdownRemark.headings'
  | 'frontmatter.cover.childrenMarkdownRemark.html'
  | 'frontmatter.cover.childrenMarkdownRemark.htmlAst'
  | 'frontmatter.cover.childrenMarkdownRemark.id'
  | 'frontmatter.cover.childrenMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.cover.childrenMarkdownRemark.tableOfContents'
  | 'frontmatter.cover.childrenMarkdownRemark.timeToRead'
  | 'frontmatter.cover.childrenMdx'
  | 'frontmatter.cover.childrenMdx.body'
  | 'frontmatter.cover.childrenMdx.children'
  | 'frontmatter.cover.childrenMdx.childrenGrvscCodeBlock'
  | 'frontmatter.cover.childrenMdx.excerpt'
  | 'frontmatter.cover.childrenMdx.fileAbsolutePath'
  | 'frontmatter.cover.childrenMdx.headings'
  | 'frontmatter.cover.childrenMdx.html'
  | 'frontmatter.cover.childrenMdx.id'
  | 'frontmatter.cover.childrenMdx.mdxAST'
  | 'frontmatter.cover.childrenMdx.rawBody'
  | 'frontmatter.cover.childrenMdx.slug'
  | 'frontmatter.cover.childrenMdx.tableOfContents'
  | 'frontmatter.cover.childrenMdx.timeToRead'
  | 'frontmatter.cover.childrenMenuJson'
  | 'frontmatter.cover.childrenMenuJson.children'
  | 'frontmatter.cover.childrenMenuJson.footerOnly'
  | 'frontmatter.cover.childrenMenuJson.home'
  | 'frontmatter.cover.childrenMenuJson.id'
  | 'frontmatter.cover.childrenMenuJson.label'
  | 'frontmatter.cover.childrenMenuJson.link'
  | 'frontmatter.cover.childrenTalksJson'
  | 'frontmatter.cover.childrenTalksJson.children'
  | 'frontmatter.cover.childrenTalksJson.coSpeaker'
  | 'frontmatter.cover.childrenTalksJson.coSpeakerHandle'
  | 'frontmatter.cover.childrenTalksJson.date'
  | 'frontmatter.cover.childrenTalksJson.event'
  | 'frontmatter.cover.childrenTalksJson.id'
  | 'frontmatter.cover.childrenTalksJson.image'
  | 'frontmatter.cover.childrenTalksJson.link'
  | 'frontmatter.cover.childrenTalksJson.slides'
  | 'frontmatter.cover.childrenTalksJson.title'
  | 'frontmatter.cover.childrenTalksJson.type'
  | 'frontmatter.cover.childrenTalksJson.video'
  | 'frontmatter.cover.children.children'
  | 'frontmatter.cover.children.id'
  | 'frontmatter.cover.ctime'
  | 'frontmatter.cover.ctimeMs'
  | 'frontmatter.cover.dev'
  | 'frontmatter.cover.dir'
  | 'frontmatter.cover.ext'
  | 'frontmatter.cover.extension'
  | 'frontmatter.cover.gid'
  | 'frontmatter.cover.id'
  | 'frontmatter.cover.ino'
  | 'frontmatter.cover.internal.content'
  | 'frontmatter.cover.internal.contentDigest'
  | 'frontmatter.cover.internal.contentFilePath'
  | 'frontmatter.cover.internal.description'
  | 'frontmatter.cover.internal.fieldOwners'
  | 'frontmatter.cover.internal.ignoreType'
  | 'frontmatter.cover.internal.mediaType'
  | 'frontmatter.cover.internal.owner'
  | 'frontmatter.cover.internal.type'
  | 'frontmatter.cover.mode'
  | 'frontmatter.cover.modifiedTime'
  | 'frontmatter.cover.mtime'
  | 'frontmatter.cover.mtimeMs'
  | 'frontmatter.cover.name'
  | 'frontmatter.cover.nlink'
  | 'frontmatter.cover.parent.children'
  | 'frontmatter.cover.parent.id'
  | 'frontmatter.cover.prettySize'
  | 'frontmatter.cover.publicURL'
  | 'frontmatter.cover.rdev'
  | 'frontmatter.cover.relativeDirectory'
  | 'frontmatter.cover.relativePath'
  | 'frontmatter.cover.root'
  | 'frontmatter.cover.size'
  | 'frontmatter.cover.sourceInstanceName'
  | 'frontmatter.cover.uid'
  | 'frontmatter.date'
  | 'frontmatter.description'
  | 'frontmatter.published'
  | 'frontmatter.tags'
  | 'frontmatter.title'
  | 'headings'
  | 'headings.depth'
  | 'headings.id'
  | 'headings.value'
  | 'html'
  | 'htmlAst'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawMarkdownBody'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MarkdownRemarkFieldsFilterInput = {
  readonly readingTime: InputMaybe<MarkdownRemarkFieldsReadingTimeFilterInput>;
  readonly socialcard: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsReadingTime = {
  readonly minutes: Maybe<Scalars['Float']>;
  readonly text: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownRemarkFieldsReadingTimeFilterInput = {
  readonly minutes: InputMaybe<FloatQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly canonical: Maybe<Scalars['String']>;
  readonly cover: Maybe<File>;
  readonly coverInfo: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly published: Maybe<Scalars['Boolean']>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly canonical: InputMaybe<StringQueryOperatorInput>;
  readonly cover: InputMaybe<FileFilterInput>;
  readonly coverInfo: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type Mdx = Node & {
  readonly body: Scalars['String'];
  /** Returns the first child node of type GRVSCCodeBlock or null if there are no children of given type on this node */
  readonly childGrvscCodeBlock: Maybe<GRVSCCodeBlock>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type GRVSCCodeBlock */
  readonly childrenGrvscCodeBlock: Maybe<ReadonlyArray<Maybe<GRVSCCodeBlock>>>;
  readonly excerpt: Scalars['String'];
  readonly fields: Maybe<MdxFields>;
  readonly fileAbsolutePath: Scalars['String'];
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MdxHeadingMdx>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mdxAST: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly rawBody: Scalars['String'];
  readonly slug: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MdxWordCount>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type Mdx_headingsArgs = {
  depth: InputMaybe<HeadingsMdx>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFields = {
  readonly readingTime: Maybe<MdxFieldsReadingTime>;
  readonly slug: Maybe<Scalars['String']>;
  readonly socialcard: Maybe<Scalars['String']>;
};

type MdxFieldsEnum =
  | 'body'
  | 'childGrvscCodeBlock.additionalThemes'
  | 'childGrvscCodeBlock.additionalThemes.conditions'
  | 'childGrvscCodeBlock.additionalThemes.conditions.condition'
  | 'childGrvscCodeBlock.additionalThemes.conditions.value'
  | 'childGrvscCodeBlock.additionalThemes.identifier'
  | 'childGrvscCodeBlock.additionalThemes.path'
  | 'childGrvscCodeBlock.children'
  | 'childGrvscCodeBlock.children.children'
  | 'childGrvscCodeBlock.children.children.children'
  | 'childGrvscCodeBlock.children.children.id'
  | 'childGrvscCodeBlock.children.id'
  | 'childGrvscCodeBlock.children.internal.content'
  | 'childGrvscCodeBlock.children.internal.contentDigest'
  | 'childGrvscCodeBlock.children.internal.contentFilePath'
  | 'childGrvscCodeBlock.children.internal.description'
  | 'childGrvscCodeBlock.children.internal.fieldOwners'
  | 'childGrvscCodeBlock.children.internal.ignoreType'
  | 'childGrvscCodeBlock.children.internal.mediaType'
  | 'childGrvscCodeBlock.children.internal.owner'
  | 'childGrvscCodeBlock.children.internal.type'
  | 'childGrvscCodeBlock.children.parent.children'
  | 'childGrvscCodeBlock.children.parent.id'
  | 'childGrvscCodeBlock.codeClassName'
  | 'childGrvscCodeBlock.defaultTheme.conditions'
  | 'childGrvscCodeBlock.defaultTheme.conditions.condition'
  | 'childGrvscCodeBlock.defaultTheme.conditions.value'
  | 'childGrvscCodeBlock.defaultTheme.identifier'
  | 'childGrvscCodeBlock.defaultTheme.path'
  | 'childGrvscCodeBlock.html'
  | 'childGrvscCodeBlock.id'
  | 'childGrvscCodeBlock.index'
  | 'childGrvscCodeBlock.internal.content'
  | 'childGrvscCodeBlock.internal.contentDigest'
  | 'childGrvscCodeBlock.internal.contentFilePath'
  | 'childGrvscCodeBlock.internal.description'
  | 'childGrvscCodeBlock.internal.fieldOwners'
  | 'childGrvscCodeBlock.internal.ignoreType'
  | 'childGrvscCodeBlock.internal.mediaType'
  | 'childGrvscCodeBlock.internal.owner'
  | 'childGrvscCodeBlock.internal.type'
  | 'childGrvscCodeBlock.language'
  | 'childGrvscCodeBlock.meta'
  | 'childGrvscCodeBlock.parent.children'
  | 'childGrvscCodeBlock.parent.children.children'
  | 'childGrvscCodeBlock.parent.children.id'
  | 'childGrvscCodeBlock.parent.id'
  | 'childGrvscCodeBlock.parent.internal.content'
  | 'childGrvscCodeBlock.parent.internal.contentDigest'
  | 'childGrvscCodeBlock.parent.internal.contentFilePath'
  | 'childGrvscCodeBlock.parent.internal.description'
  | 'childGrvscCodeBlock.parent.internal.fieldOwners'
  | 'childGrvscCodeBlock.parent.internal.ignoreType'
  | 'childGrvscCodeBlock.parent.internal.mediaType'
  | 'childGrvscCodeBlock.parent.internal.owner'
  | 'childGrvscCodeBlock.parent.internal.type'
  | 'childGrvscCodeBlock.parent.parent.children'
  | 'childGrvscCodeBlock.parent.parent.id'
  | 'childGrvscCodeBlock.preClassName'
  | 'childGrvscCodeBlock.text'
  | 'childGrvscCodeBlock.tokenizedLines'
  | 'childGrvscCodeBlock.tokenizedLines.attrs'
  | 'childGrvscCodeBlock.tokenizedLines.className'
  | 'childGrvscCodeBlock.tokenizedLines.data'
  | 'childGrvscCodeBlock.tokenizedLines.diff'
  | 'childGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childGrvscCodeBlock.tokenizedLines.gutterCells.className'
  | 'childGrvscCodeBlock.tokenizedLines.gutterCells.text'
  | 'childGrvscCodeBlock.tokenizedLines.html'
  | 'childGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childGrvscCodeBlock.tokenizedLines.text'
  | 'childGrvscCodeBlock.tokenizedLines.tokens'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.additionalThemeTokenData'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.className'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.endIndex'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.html'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.scopes'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.startIndex'
  | 'childGrvscCodeBlock.tokenizedLines.tokens.text'
  | 'children'
  | 'childrenGrvscCodeBlock'
  | 'childrenGrvscCodeBlock.additionalThemes'
  | 'childrenGrvscCodeBlock.additionalThemes.conditions'
  | 'childrenGrvscCodeBlock.additionalThemes.conditions.condition'
  | 'childrenGrvscCodeBlock.additionalThemes.conditions.value'
  | 'childrenGrvscCodeBlock.additionalThemes.identifier'
  | 'childrenGrvscCodeBlock.additionalThemes.path'
  | 'childrenGrvscCodeBlock.children'
  | 'childrenGrvscCodeBlock.children.children'
  | 'childrenGrvscCodeBlock.children.children.children'
  | 'childrenGrvscCodeBlock.children.children.id'
  | 'childrenGrvscCodeBlock.children.id'
  | 'childrenGrvscCodeBlock.children.internal.content'
  | 'childrenGrvscCodeBlock.children.internal.contentDigest'
  | 'childrenGrvscCodeBlock.children.internal.contentFilePath'
  | 'childrenGrvscCodeBlock.children.internal.description'
  | 'childrenGrvscCodeBlock.children.internal.fieldOwners'
  | 'childrenGrvscCodeBlock.children.internal.ignoreType'
  | 'childrenGrvscCodeBlock.children.internal.mediaType'
  | 'childrenGrvscCodeBlock.children.internal.owner'
  | 'childrenGrvscCodeBlock.children.internal.type'
  | 'childrenGrvscCodeBlock.children.parent.children'
  | 'childrenGrvscCodeBlock.children.parent.id'
  | 'childrenGrvscCodeBlock.codeClassName'
  | 'childrenGrvscCodeBlock.defaultTheme.conditions'
  | 'childrenGrvscCodeBlock.defaultTheme.conditions.condition'
  | 'childrenGrvscCodeBlock.defaultTheme.conditions.value'
  | 'childrenGrvscCodeBlock.defaultTheme.identifier'
  | 'childrenGrvscCodeBlock.defaultTheme.path'
  | 'childrenGrvscCodeBlock.html'
  | 'childrenGrvscCodeBlock.id'
  | 'childrenGrvscCodeBlock.index'
  | 'childrenGrvscCodeBlock.internal.content'
  | 'childrenGrvscCodeBlock.internal.contentDigest'
  | 'childrenGrvscCodeBlock.internal.contentFilePath'
  | 'childrenGrvscCodeBlock.internal.description'
  | 'childrenGrvscCodeBlock.internal.fieldOwners'
  | 'childrenGrvscCodeBlock.internal.ignoreType'
  | 'childrenGrvscCodeBlock.internal.mediaType'
  | 'childrenGrvscCodeBlock.internal.owner'
  | 'childrenGrvscCodeBlock.internal.type'
  | 'childrenGrvscCodeBlock.language'
  | 'childrenGrvscCodeBlock.meta'
  | 'childrenGrvscCodeBlock.parent.children'
  | 'childrenGrvscCodeBlock.parent.children.children'
  | 'childrenGrvscCodeBlock.parent.children.id'
  | 'childrenGrvscCodeBlock.parent.id'
  | 'childrenGrvscCodeBlock.parent.internal.content'
  | 'childrenGrvscCodeBlock.parent.internal.contentDigest'
  | 'childrenGrvscCodeBlock.parent.internal.contentFilePath'
  | 'childrenGrvscCodeBlock.parent.internal.description'
  | 'childrenGrvscCodeBlock.parent.internal.fieldOwners'
  | 'childrenGrvscCodeBlock.parent.internal.ignoreType'
  | 'childrenGrvscCodeBlock.parent.internal.mediaType'
  | 'childrenGrvscCodeBlock.parent.internal.owner'
  | 'childrenGrvscCodeBlock.parent.internal.type'
  | 'childrenGrvscCodeBlock.parent.parent.children'
  | 'childrenGrvscCodeBlock.parent.parent.id'
  | 'childrenGrvscCodeBlock.preClassName'
  | 'childrenGrvscCodeBlock.text'
  | 'childrenGrvscCodeBlock.tokenizedLines'
  | 'childrenGrvscCodeBlock.tokenizedLines.attrs'
  | 'childrenGrvscCodeBlock.tokenizedLines.className'
  | 'childrenGrvscCodeBlock.tokenizedLines.data'
  | 'childrenGrvscCodeBlock.tokenizedLines.diff'
  | 'childrenGrvscCodeBlock.tokenizedLines.gutterCells'
  | 'childrenGrvscCodeBlock.tokenizedLines.gutterCells.className'
  | 'childrenGrvscCodeBlock.tokenizedLines.gutterCells.text'
  | 'childrenGrvscCodeBlock.tokenizedLines.html'
  | 'childrenGrvscCodeBlock.tokenizedLines.isHighlighted'
  | 'childrenGrvscCodeBlock.tokenizedLines.lineNumber'
  | 'childrenGrvscCodeBlock.tokenizedLines.text'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.additionalThemeTokenData'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.className'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.endIndex'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.html'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.scopes'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.startIndex'
  | 'childrenGrvscCodeBlock.tokenizedLines.tokens.text'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'fields.readingTime.minutes'
  | 'fields.readingTime.text'
  | 'fields.readingTime.time'
  | 'fields.readingTime.words'
  | 'fields.slug'
  | 'fields.socialcard'
  | 'fileAbsolutePath'
  | 'frontmatter.canonical'
  | 'frontmatter.coverInfo'
  | 'frontmatter.cover.absolutePath'
  | 'frontmatter.cover.accessTime'
  | 'frontmatter.cover.atime'
  | 'frontmatter.cover.atimeMs'
  | 'frontmatter.cover.base'
  | 'frontmatter.cover.birthTime'
  | 'frontmatter.cover.birthtime'
  | 'frontmatter.cover.birthtimeMs'
  | 'frontmatter.cover.blksize'
  | 'frontmatter.cover.blocks'
  | 'frontmatter.cover.changeTime'
  | 'frontmatter.cover.childImageSharp.children'
  | 'frontmatter.cover.childImageSharp.gatsbyImageData'
  | 'frontmatter.cover.childImageSharp.id'
  | 'frontmatter.cover.childMarkdownRemark.children'
  | 'frontmatter.cover.childMarkdownRemark.excerpt'
  | 'frontmatter.cover.childMarkdownRemark.excerptAst'
  | 'frontmatter.cover.childMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.cover.childMarkdownRemark.headings'
  | 'frontmatter.cover.childMarkdownRemark.html'
  | 'frontmatter.cover.childMarkdownRemark.htmlAst'
  | 'frontmatter.cover.childMarkdownRemark.id'
  | 'frontmatter.cover.childMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.cover.childMarkdownRemark.tableOfContents'
  | 'frontmatter.cover.childMarkdownRemark.timeToRead'
  | 'frontmatter.cover.childMdx.body'
  | 'frontmatter.cover.childMdx.children'
  | 'frontmatter.cover.childMdx.childrenGrvscCodeBlock'
  | 'frontmatter.cover.childMdx.excerpt'
  | 'frontmatter.cover.childMdx.fileAbsolutePath'
  | 'frontmatter.cover.childMdx.headings'
  | 'frontmatter.cover.childMdx.html'
  | 'frontmatter.cover.childMdx.id'
  | 'frontmatter.cover.childMdx.mdxAST'
  | 'frontmatter.cover.childMdx.rawBody'
  | 'frontmatter.cover.childMdx.slug'
  | 'frontmatter.cover.childMdx.tableOfContents'
  | 'frontmatter.cover.childMdx.timeToRead'
  | 'frontmatter.cover.childMenuJson.children'
  | 'frontmatter.cover.childMenuJson.footerOnly'
  | 'frontmatter.cover.childMenuJson.home'
  | 'frontmatter.cover.childMenuJson.id'
  | 'frontmatter.cover.childMenuJson.label'
  | 'frontmatter.cover.childMenuJson.link'
  | 'frontmatter.cover.childTalksJson.children'
  | 'frontmatter.cover.childTalksJson.coSpeaker'
  | 'frontmatter.cover.childTalksJson.coSpeakerHandle'
  | 'frontmatter.cover.childTalksJson.date'
  | 'frontmatter.cover.childTalksJson.event'
  | 'frontmatter.cover.childTalksJson.id'
  | 'frontmatter.cover.childTalksJson.image'
  | 'frontmatter.cover.childTalksJson.link'
  | 'frontmatter.cover.childTalksJson.slides'
  | 'frontmatter.cover.childTalksJson.title'
  | 'frontmatter.cover.childTalksJson.type'
  | 'frontmatter.cover.childTalksJson.video'
  | 'frontmatter.cover.children'
  | 'frontmatter.cover.childrenImageSharp'
  | 'frontmatter.cover.childrenImageSharp.children'
  | 'frontmatter.cover.childrenImageSharp.gatsbyImageData'
  | 'frontmatter.cover.childrenImageSharp.id'
  | 'frontmatter.cover.childrenMarkdownRemark'
  | 'frontmatter.cover.childrenMarkdownRemark.children'
  | 'frontmatter.cover.childrenMarkdownRemark.excerpt'
  | 'frontmatter.cover.childrenMarkdownRemark.excerptAst'
  | 'frontmatter.cover.childrenMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.cover.childrenMarkdownRemark.headings'
  | 'frontmatter.cover.childrenMarkdownRemark.html'
  | 'frontmatter.cover.childrenMarkdownRemark.htmlAst'
  | 'frontmatter.cover.childrenMarkdownRemark.id'
  | 'frontmatter.cover.childrenMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.cover.childrenMarkdownRemark.tableOfContents'
  | 'frontmatter.cover.childrenMarkdownRemark.timeToRead'
  | 'frontmatter.cover.childrenMdx'
  | 'frontmatter.cover.childrenMdx.body'
  | 'frontmatter.cover.childrenMdx.children'
  | 'frontmatter.cover.childrenMdx.childrenGrvscCodeBlock'
  | 'frontmatter.cover.childrenMdx.excerpt'
  | 'frontmatter.cover.childrenMdx.fileAbsolutePath'
  | 'frontmatter.cover.childrenMdx.headings'
  | 'frontmatter.cover.childrenMdx.html'
  | 'frontmatter.cover.childrenMdx.id'
  | 'frontmatter.cover.childrenMdx.mdxAST'
  | 'frontmatter.cover.childrenMdx.rawBody'
  | 'frontmatter.cover.childrenMdx.slug'
  | 'frontmatter.cover.childrenMdx.tableOfContents'
  | 'frontmatter.cover.childrenMdx.timeToRead'
  | 'frontmatter.cover.childrenMenuJson'
  | 'frontmatter.cover.childrenMenuJson.children'
  | 'frontmatter.cover.childrenMenuJson.footerOnly'
  | 'frontmatter.cover.childrenMenuJson.home'
  | 'frontmatter.cover.childrenMenuJson.id'
  | 'frontmatter.cover.childrenMenuJson.label'
  | 'frontmatter.cover.childrenMenuJson.link'
  | 'frontmatter.cover.childrenTalksJson'
  | 'frontmatter.cover.childrenTalksJson.children'
  | 'frontmatter.cover.childrenTalksJson.coSpeaker'
  | 'frontmatter.cover.childrenTalksJson.coSpeakerHandle'
  | 'frontmatter.cover.childrenTalksJson.date'
  | 'frontmatter.cover.childrenTalksJson.event'
  | 'frontmatter.cover.childrenTalksJson.id'
  | 'frontmatter.cover.childrenTalksJson.image'
  | 'frontmatter.cover.childrenTalksJson.link'
  | 'frontmatter.cover.childrenTalksJson.slides'
  | 'frontmatter.cover.childrenTalksJson.title'
  | 'frontmatter.cover.childrenTalksJson.type'
  | 'frontmatter.cover.childrenTalksJson.video'
  | 'frontmatter.cover.children.children'
  | 'frontmatter.cover.children.id'
  | 'frontmatter.cover.ctime'
  | 'frontmatter.cover.ctimeMs'
  | 'frontmatter.cover.dev'
  | 'frontmatter.cover.dir'
  | 'frontmatter.cover.ext'
  | 'frontmatter.cover.extension'
  | 'frontmatter.cover.gid'
  | 'frontmatter.cover.id'
  | 'frontmatter.cover.ino'
  | 'frontmatter.cover.internal.content'
  | 'frontmatter.cover.internal.contentDigest'
  | 'frontmatter.cover.internal.contentFilePath'
  | 'frontmatter.cover.internal.description'
  | 'frontmatter.cover.internal.fieldOwners'
  | 'frontmatter.cover.internal.ignoreType'
  | 'frontmatter.cover.internal.mediaType'
  | 'frontmatter.cover.internal.owner'
  | 'frontmatter.cover.internal.type'
  | 'frontmatter.cover.mode'
  | 'frontmatter.cover.modifiedTime'
  | 'frontmatter.cover.mtime'
  | 'frontmatter.cover.mtimeMs'
  | 'frontmatter.cover.name'
  | 'frontmatter.cover.nlink'
  | 'frontmatter.cover.parent.children'
  | 'frontmatter.cover.parent.id'
  | 'frontmatter.cover.prettySize'
  | 'frontmatter.cover.publicURL'
  | 'frontmatter.cover.rdev'
  | 'frontmatter.cover.relativeDirectory'
  | 'frontmatter.cover.relativePath'
  | 'frontmatter.cover.root'
  | 'frontmatter.cover.size'
  | 'frontmatter.cover.sourceInstanceName'
  | 'frontmatter.cover.uid'
  | 'frontmatter.date'
  | 'frontmatter.description'
  | 'frontmatter.published'
  | 'frontmatter.tags'
  | 'frontmatter.title'
  | 'headings'
  | 'headings.depth'
  | 'headings.value'
  | 'html'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mdxAST'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawBody'
  | 'slug'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MdxFieldsFilterInput = {
  readonly readingTime: InputMaybe<MdxFieldsReadingTimeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly socialcard: InputMaybe<StringQueryOperatorInput>;
};

type MdxFieldsReadingTime = {
  readonly minutes: Maybe<Scalars['Float']>;
  readonly text: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MdxFieldsReadingTimeFilterInput = {
  readonly minutes: InputMaybe<FloatQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly childGrvscCodeBlock: InputMaybe<GRVSCCodeBlockFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenGrvscCodeBlock: InputMaybe<GRVSCCodeBlockFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<MdxFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mdxAST: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawBody: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MdxWordCountFilterInput>;
};

type MdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFilterInput>;
};

type MdxFrontmatter = {
  readonly canonical: Maybe<Scalars['String']>;
  readonly cover: Maybe<File>;
  readonly coverInfo: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly published: Maybe<Scalars['Boolean']>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Scalars['String'];
};


type MdxFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterFilterInput = {
  readonly canonical: InputMaybe<StringQueryOperatorInput>;
  readonly cover: InputMaybe<FileFilterInput>;
  readonly coverInfo: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxHeadingMdx = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly value: Maybe<Scalars['String']>;
};

type MdxHeadingMdxFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MdxHeadingMdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxHeadingMdxFilterInput>;
};

type MdxSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MdxFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MdxWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MdxWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MenuJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly footerOnly: Maybe<Scalars['Boolean']>;
  readonly home: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type MenuJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MenuJsonEdge>;
  readonly group: ReadonlyArray<MenuJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MenuJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MenuJsonConnection_distinctArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonConnection_groupArgs = {
  field: MenuJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MenuJsonConnection_maxArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonConnection_minArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonConnection_sumArgs = {
  field: MenuJsonFieldsEnum;
};

type MenuJsonEdge = {
  readonly next: Maybe<MenuJson>;
  readonly node: MenuJson;
  readonly previous: Maybe<MenuJson>;
};

type MenuJsonFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'footerOnly'
  | 'home'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'label'
  | 'link'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type MenuJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly footerOnly: InputMaybe<BooleanQueryOperatorInput>;
  readonly home: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type MenuJsonFilterListInput = {
  readonly elemMatch: InputMaybe<MenuJsonFilterInput>;
};

type MenuJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MenuJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MenuJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MenuJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MenuJsonGroupConnection_distinctArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonGroupConnection_groupArgs = {
  field: MenuJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MenuJsonGroupConnection_maxArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonGroupConnection_minArgs = {
  field: MenuJsonFieldsEnum;
};


type MenuJsonGroupConnection_sumArgs = {
  field: MenuJsonFieldsEnum;
};

type MenuJsonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MenuJsonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGrvscCodeBlock: GRVSCCodeBlockConnection;
  readonly allGrvscCodeSpan: GRVSCCodeSpanConnection;
  readonly allGrvscStylesheet: GRVSCStylesheetConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allMdx: MdxConnection;
  readonly allMenuJson: MenuJsonConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allTalksJson: TalksJsonConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly grvscCodeBlock: Maybe<GRVSCCodeBlock>;
  readonly grvscCodeSpan: Maybe<GRVSCCodeSpan>;
  readonly grvscHighlight: Maybe<GRVSCCodeBlock>;
  readonly grvscStylesheet: Maybe<GRVSCStylesheet>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly mdx: Maybe<Mdx>;
  readonly menuJson: Maybe<MenuJson>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly talksJson: Maybe<TalksJson>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allGrvscCodeBlockArgs = {
  filter: InputMaybe<GRVSCCodeBlockFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<GRVSCCodeBlockSortInput>;
};


type Query_allGrvscCodeSpanArgs = {
  filter: InputMaybe<GRVSCCodeSpanFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<GRVSCCodeSpanSortInput>;
};


type Query_allGrvscStylesheetArgs = {
  filter: InputMaybe<GRVSCStylesheetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<GRVSCStylesheetSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MarkdownRemarkSortInput>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MdxSortInput>;
};


type Query_allMenuJsonArgs = {
  filter: InputMaybe<MenuJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MenuJsonSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allTalksJsonArgs = {
  filter: InputMaybe<TalksJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<TalksJsonSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  childMdx: InputMaybe<MdxFilterInput>;
  childMenuJson: InputMaybe<MenuJsonFilterInput>;
  childTalksJson: InputMaybe<TalksJsonFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  childrenMdx: InputMaybe<MdxFilterListInput>;
  childrenMenuJson: InputMaybe<MenuJsonFilterListInput>;
  childrenTalksJson: InputMaybe<TalksJsonFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_grvscCodeBlockArgs = {
  additionalThemes: InputMaybe<GRVSCThemeFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeClassName: InputMaybe<StringQueryOperatorInput>;
  defaultTheme: InputMaybe<GRVSCThemeFilterInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  index: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  meta: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  preClassName: InputMaybe<StringQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  tokenizedLines: InputMaybe<GRVSCTokenizedLineFilterListInput>;
};


type Query_grvscCodeSpanArgs = {
  additionalThemes: InputMaybe<GRVSCThemeFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  className: InputMaybe<StringQueryOperatorInput>;
  defaultTheme: InputMaybe<GRVSCThemeFilterInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  index: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  tokens: InputMaybe<GRVSCTokenFilterListInput>;
};


type Query_grvscHighlightArgs = {
  additionalThemes: InputMaybe<ReadonlyArray<GRVSCThemeArgument>>;
  defaultTheme: InputMaybe<Scalars['String']>;
  language: InputMaybe<Scalars['String']>;
  meta: InputMaybe<Scalars['String']>;
  source: Scalars['String'];
};


type Query_grvscStylesheetArgs = {
  additionalThemes: InputMaybe<ReadonlyArray<GRVSCThemeArgument>>;
  defaultTheme: InputMaybe<Scalars['String']>;
  injectStyles: InputMaybe<Scalars['Boolean']>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  childGrvscCodeBlock: InputMaybe<GRVSCCodeBlockFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenGrvscCodeBlock: InputMaybe<GRVSCCodeBlockFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  fields: InputMaybe<MdxFieldsFilterInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mdxAST: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawBody: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MdxWordCountFilterInput>;
};


type Query_menuJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  footerOnly: InputMaybe<BooleanQueryOperatorInput>;
  home: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_talksJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  coSpeaker: InputMaybe<StringQueryOperatorInput>;
  coSpeakerHandle: InputMaybe<StringQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  event: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slides: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  video: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.generateOnBuild'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.author'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.social.behance'
  | 'siteMetadata.social.github'
  | 'siteMetadata.social.instagram'
  | 'siteMetadata.social.linkedIn'
  | 'siteMetadata.social.medium'
  | 'siteMetadata.social.twitter'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly social: Maybe<SiteSiteMetadataSocial>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly social: InputMaybe<SiteSiteMetadataSocialFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSocial = {
  readonly behance: Maybe<Scalars['String']>;
  readonly github: Maybe<Scalars['String']>;
  readonly instagram: Maybe<Scalars['String']>;
  readonly linkedIn: Maybe<Scalars['String']>;
  readonly medium: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
};

type SiteSiteMetadataSocialFilterInput = {
  readonly behance: InputMaybe<StringQueryOperatorInput>;
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly instagram: InputMaybe<StringQueryOperatorInput>;
  readonly linkedIn: InputMaybe<StringQueryOperatorInput>;
  readonly medium: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TalksJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly coSpeaker: Maybe<Scalars['String']>;
  readonly coSpeakerHandle: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly event: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slides: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly video: Maybe<Scalars['String']>;
};


type TalksJson_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type TalksJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TalksJsonEdge>;
  readonly group: ReadonlyArray<TalksJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TalksJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TalksJsonConnection_distinctArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonConnection_groupArgs = {
  field: TalksJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TalksJsonConnection_maxArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonConnection_minArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonConnection_sumArgs = {
  field: TalksJsonFieldsEnum;
};

type TalksJsonEdge = {
  readonly next: Maybe<TalksJson>;
  readonly node: TalksJson;
  readonly previous: Maybe<TalksJson>;
};

type TalksJsonFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'coSpeaker'
  | 'coSpeakerHandle'
  | 'date'
  | 'event'
  | 'id'
  | 'image'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'link'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'slides'
  | 'title'
  | 'type'
  | 'video';

type TalksJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly coSpeaker: InputMaybe<StringQueryOperatorInput>;
  readonly coSpeakerHandle: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly event: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slides: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly video: InputMaybe<StringQueryOperatorInput>;
};

type TalksJsonFilterListInput = {
  readonly elemMatch: InputMaybe<TalksJsonFilterInput>;
};

type TalksJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TalksJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TalksJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TalksJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TalksJsonGroupConnection_distinctArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonGroupConnection_groupArgs = {
  field: TalksJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TalksJsonGroupConnection_maxArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonGroupConnection_minArgs = {
  field: TalksJsonFieldsEnum;
};


type TalksJsonGroupConnection_sumArgs = {
  field: TalksJsonFieldsEnum;
};

type TalksJsonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<TalksJsonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type Unnamed_1_QueryVariables = Exact<{ [key: string]: never; }>;


type Unnamed_1_Query = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly body: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string, readonly published: boolean | null } | null } }> } };


}
